#!/bin/bash

# Script de Deploy da Aplica√ß√£o Web Extrator de PDF
# Uso: ./deploy.sh [dev|prod]

set -e

# Configura√ß√µes
APP_NAME="extrator-pdf"
DOCKER_IMAGE="$APP_NAME:latest"
ENV=${1:-dev}

echo "üöÄ Iniciando deploy do Extrator de PDF - Ambiente: $ENV"

# Fun√ß√£o para verificar se o Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo "‚ùå Docker n√£o est√° rodando. Inicie o Docker e tente novamente."
        exit 1
    fi
    echo "‚úÖ Docker est√° rodando"
}

# Fun√ß√£o para limpar containers antigos
cleanup() {
    echo "üßπ Limpando containers antigos..."
    docker-compose down --remove-orphans 2>/dev/null || true
    docker container prune -f 2>/dev/null || true
    echo "‚úÖ Limpeza conclu√≠da"
}

# Fun√ß√£o para construir a imagem
build_image() {
    echo "üî® Construindo imagem Docker..."
    docker build -t $DOCKER_IMAGE . --no-cache
    echo "‚úÖ Imagem constru√≠da com sucesso"
}

# Fun√ß√£o para fazer deploy em desenvolvimento
deploy_dev() {
    echo "üîß Deploy em desenvolvimento..."
    
    # Para o ambiente de desenvolvimento sem nginx
    docker-compose up --build -d web
    
    echo "‚úÖ Deploy de desenvolvimento conclu√≠do"
    echo "üåê Aplica√ß√£o dispon√≠vel em: http://localhost:5000"
}

# Fun√ß√£o para fazer deploy em produ√ß√£o
deploy_prod() {
    echo "üöÄ Deploy em produ√ß√£o..."
    
    # Para o ambiente de produ√ß√£o com nginx
    docker-compose --profile production up --build -d
    
    echo "‚úÖ Deploy de produ√ß√£o conclu√≠do"
    echo "üåê Aplica√ß√£o dispon√≠vel em: http://localhost"
    echo "üåê Aplica√ß√£o direta (sem nginx): http://localhost:5000"
}

# Fun√ß√£o para verificar sa√∫de da aplica√ß√£o
health_check() {
    echo "üè• Verificando sa√∫de da aplica√ß√£o..."
    
    # Aguarda alguns segundos para a aplica√ß√£o iniciar
    sleep 10
    
    # Verifica se a aplica√ß√£o est√° respondendo
    if curl -f http://localhost:5000/ > /dev/null 2>&1; then
        echo "‚úÖ Aplica√ß√£o est√° saud√°vel"
        return 0
    else
        echo "‚ùå Aplica√ß√£o n√£o est√° respondendo"
        echo "üìã Logs do container:"
        docker-compose logs web --tail=20
        return 1
    fi
}

# Fun√ß√£o para exibir logs
show_logs() {
    echo "üìã Exibindo logs da aplica√ß√£o..."
    docker-compose logs -f web
}

# Fun√ß√£o para exibir status
show_status() {
    echo "üìä Status dos containers:"
    docker-compose ps
    
    echo ""
    echo "üíæ Uso de disco:"
    docker system df
    
    echo ""
    echo "üîç Containers em execu√ß√£o:"
    docker ps --filter "name=$APP_NAME"
}

# Fun√ß√£o principal
main() {
    echo "============================================"
    echo "üê≥ Deploy Extrator de PDF"
    echo "============================================"
    
    check_docker
    cleanup
    build_image
    
    case $ENV in
        "dev")
            deploy_dev
            ;;
        "prod")
            deploy_prod
            ;;
        *)
            echo "‚ùå Ambiente inv√°lido. Use 'dev' ou 'prod'"
            exit 1
            ;;
    esac
    
    health_check
    show_status
    
    echo ""
    echo "============================================"
    echo "‚úÖ Deploy conclu√≠do com sucesso!"
    echo "============================================"
    echo ""
    echo "üìñ Comandos √∫teis:"
    echo "  Ver logs:        docker-compose logs -f web"
    echo "  Parar app:       docker-compose down"
    echo "  Status:          docker-compose ps"
    echo "  Rebuild:         docker-compose up --build -d"
    echo ""
    
    # Pergunta se quer ver logs
    read -p "Deseja ver os logs em tempo real? (y/N): " show_logs_choice
    if [[ $show_logs_choice =~ ^[Yy]$ ]]; then
        show_logs
    fi
}

# Tratamento de sinais
trap 'echo ""; echo "‚ùå Deploy interrompido"; exit 1' INT TERM

# Executa fun√ß√£o principal
main
